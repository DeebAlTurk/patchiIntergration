<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Orders extends Model
{
    use HasFactory;

    protected $fillable = [
        "user_id",
        "policy_number",
        "receiver_name",
        "order_category_id",
        "phone_number",
        "city_id",
        "address",
        "comment",
        "delivery_providers_id",
        "status",
        "preferred_delivery_date",
        "supervisor",
        'sms_code_confirmation'

    ];
    protected $casts=
        ['preferred_delivery_date'=>"datetime",'phone_number' => 'integer'];

    //relationships
    public function update(array $attributes = [], array $options = [])
    {
        if (\Arr::has($attributes,'status')){
            $orderStatusNew=$this->orderStatuses()->where('status',$attributes['status'])->get();
            if ($orderStatusNew->isEmpty()){
                $orderStatusNew=$this->orderStatuses()->create([
                    'status'=>$attributes['status'],
                    'supervisor'=>$this->supervisor
                ]);
            }
        }
        return parent::update($attributes, $options); // TODO: Change the autogenerated stub
    }
    public function validateSMS(string $input){
        $latestSMS=$this->LatestSmsCode();
        if ($input === $latestSMS->code) {
            return $this->update(['sms_code_confirmation'=>true]);
        }
        return false;
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function order_category()
    {
        return $this->belongsTo(orderCategory::class);
    }

    public function city()
    {
        return $this->belongsTo(City::class);
    }

    public function orderStatuses(): HasMany
    {
        return $this->hasMany(orderStatus::class, 'orders_id');
    }
    public function ActiveSmsCodes(): HasMany
    {
        return $this->hasMany(SmsCode::class, 'orders_id')->active();
    }
    public function ExpiredSmsCodes(): HasMany
    {
        return $this->hasMany(SmsCode::class, 'orders_id')->expired();
    }
    public function SmsCodes(): HasMany
    {
        return $this->hasMany(SmsCode::class, 'orders_id');
    }
    public function LatestSmsCode(){
        return $this->ActiveSmsCodes()->latest()->first();
    }

}
